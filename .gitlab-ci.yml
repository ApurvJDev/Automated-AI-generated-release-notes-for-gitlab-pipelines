default:
  tags:
    - default

stages:
    - release

workflow:             # Execute the pipeline only when run pipeline button is clicked or tag is pushed
   rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
    #   when: always
    # - when: never
    - if: $CI_COMMIT_TAG


bump_tag:
  image: alpine:latest
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG == null' # Trying to prevent execution when commit tag is present
  before_script: 
    - apk add --no-cache git
    - apk add curl jq
    # putting credentials
    - git config --global user.email "${GITLAB_EMAIL}"
    - git config --global user.name "${GITLAB_USER}"
  script:
    # Checking if file path is getting read
    # - echo $STACK_VERSION_FILE
    - export LATEST_TAG=$(cat .version)
    - echo "$LATEST_TAG"

    # Incrementing by patch
    - NEW_TAG=$(echo $LATEST_TAG | awk -F. '{printf "%d.%d.%d", $1, $2, $3 + 1}')
    - echo "New tag will be $NEW_TAG"

    # POST req to gitlab api endpoint to create a new tag
    - 'curl -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" -X POST --data "tag_name=$NEW_TAG&ref=$CI_COMMIT_SHA" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags"'
    # Updating the .version file
    - echo "$NEW_TAG" > .version
    - git add .
    - git commit -m "automated version bump"
    - git push -o ci.skip https://root:$GITLAB_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:main
    
prepare_notes:
  stage: release
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG' # gets triggered at each tag push
  # needs:
  #   - job: bump_tag
  script:
    - apk add curl jq
    # create release notes by using changelog api
    - 'curl -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG" | jq -r .notes > release_notes.md'
    # - 'curl -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG"'
    # commit changes in changelog file in repository (optional)
    # - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" -X POST "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG"'
  artifacts:
    paths:
      - release_notes.md

generate_descriptive_notes:
  stage: release
  image: python:3.9-alpine
  # image: ubuntu
  rules:
    - if: '$CI_COMMIT_TAG' # gets triggered at each tag push
  needs:
    - job: prepare_notes
      artifacts: true
  before_script:
#---------------------------------------------------for ubuntu image
    # - apt-get update
    # - apt-get install -y jq
    # - apt install -y curl
#---------------------------------------------------for alpine image
    - pip install --upgrade pip
    - pip install openai
    - apk add curl jq
    # - pip install groq
    # - pip install google-generativeai
  script:
    - python nimLlama.py
    # - |
    #   curl "https://api.groq.com/openai/v1/chat/completions" \
    #   -X POST \
    #   -H "Content-Type: application/json" \
    #   -H "Authorization: Bearer ${GROQ_API_KEY}" \
    #   -d '{
    #      "messages": [
    #        {
    #          "role": "user",
    #          "content": "Write a senntence on AI"
    #        }
    #      ],
    #      "model": "llama3-8b-8192",
    #      "temperature": 1,
    #      "max_tokens": 1024,
    #      "top_p": 1,
    #      "stream": true,
    #      "stop": null
    #    }'
    # - CHANGELOG=$(cat release_notes.md)
    # - |
    #   result=$(curl -s https://integrate.api.nvidia.com/v1/chat/completions \
    #   -H "Content-Type: application/json" \
    #   -H "Authorization: Bearer <NVIDIA NIM API KEY>" \
    #   -d '{
    #     "model": "meta/llama3-70b-instruct",
    #     "messages": [{"role":"user","content":"Generate descriptive release notes:'"$CHANGELOG"'"}],
    #     "temperature": 1,   
    #     "top_p": 1,
    #     "max_tokens": 1024,
    #     "stream": true                
    #   }')
    # Extract the content from the response
    # - DESCRIPTIVE_NOTES=$(echo "$result" | grep -o '"content":"[^"]*"' | sed 's/"content":"\([^"]*\)"/\1/g') 
    # - DESCRIPTIVE_NOTES=$(echo "$result" | grep -oP '(?<="content":")[^"]*' | tr '\n' ' ')
    # - DESCRIPTIVE_NOTES=$(echo "$result" | grep -oE '{"id":.*' | jq -r '.choices[].delta.content' | tr '\n' ' ')
    # - DESCRIPTIVE_NOTES=$(echo "$result" | sed -n 's/^data://p' | jq -r '.choices[].delta.content' | tr '\n' ' ')
    # - DESCRIPTIVE_NOTES=$(echo "$result" | awk '/^data:/ {print substr($0, 7)}' | jq -r '.choices[].delta.content' | tr    '\n' ' ')
    # - echo "$DESCRIPTIVE_NOTES"
  artifacts:
    paths:
      - release_notes.md

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: generate_descriptive_notes
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "Creating release"
    - echo "$CI_COMMIT_TAG"
  release:
    name: '$CI_COMMIT_TAG' 
    description: release_notes.md
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_SHA'

