default:
  tags:
    - default

stages:
  - test
  - build
  - release

run_test:     # Placeholder job
  stage: test
  script:
    echo "I am testing"

build_job:    # Placeholder job
  stage: build
  script:
    echo "I am building"

prepare_notes:
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG # gets triggered at each commit
  script:
    - apk add curl jq
    
    # - curl --request POST --header "PRIVATE-TOKEN: token" \
    #     --data "version=1.0.0" \
    #     --url "https://gitlab.com/api/v4/projects/42/repository/changelog"

    # create release notes by using changelog api
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG" | jq -r .notes > release_notes.md'
    
    # commit changes in changelog file in repository (optional)
    # - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" -X POST "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG"'

  artifacts:
    paths:
    - release_notes.md

generate_descriptive_notes:
  stage: release
  image: python:3.9-alpine
  rules:
    - if: '$CI_COMMIT_TAG' # gets triggered at each commit
  needs:
    - job: prepare_notes
      artifacts: true
  before_script:
    - pip install --upgrade pip
    - pip install groq
  script:
    - python llama.py
  artifacts:
    paths:
      - release_notes.md


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: generate_descriptive_notes
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "Creating release"
    - echo "$CI_COMMIT_TAG"
  release:
    name: '$CI_COMMIT_TAG' 
    description: release_notes.md
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_SHA'

# ONLY IN CASE OF MANUAL RELEASE OR MANUAL TAGGING, THE BELOW CODE WOULD BE ADDED IN PREPARE_NOTES 
# setting variable value as release_notes.md
    # - RELEASE_DESCRIPTION=$(cat release_notes.md)

# Update the release description in GitLab
    # - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" -X PUT -d "description=$RELEASE_DESCRIPTION" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG"'

# Fetch current release information including description
#    - CURRENT_RELEASE=$(curl -s --header "PRIVATE-TOKEN:$CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG")

#    - CURRENT_DESCRIPTION=$(echo "$CURRENT_RELEASE" | jq -r '.description // ""')

#    - echo $CURRENT_DESCRIPTION   # checking if description is fetched correctly

#----------------------- Current description(optional) + changelog = updated description
#    - UPDATED_DESCRIPTION=$(echo -e "$CURRENT_DESCRIPTION\n\n$RELEASE_DESCRIPTION")

#    - echo $UPDATED_DESCRIPTION   # check if both descriptions correctly updated.
